MadLib: Sick Note

Hello [boss], this is [person's name].

I think I've got that [stomach] virus that is going around [campus].


//    public LinkedList<String> crawlHTML(URL site) throws IOException
//    {
//        String str;
//        LinkedList<String> href = new LinkedList<String>();
//        BufferedReader webPage = new BufferedReader(new InputStreamReader(site.openStream()));
//        str = webPage.readLine();
//        while(str != null)
//        {
//            if (str.toLowerCase().contains("a href"))
//            {
//                href.add(str);
//            }
//            str = webPage.readLine();
//        }
//        webPage.close();
//        for (String h : href)
//            System.out.println(h);
//        return href;
//    }


//    public LinkedList<String> processFiles(URL site) throws IOException
//    {
//        LinkedList<String> href;
//        LinkedList<String> list = new LinkedList<String>();
//        href = parse(site);
//        
//        for (String str : href)
//        {
//            if (str.contains(".cpp") || str.contains(".java") || str.contains(".h") || str.contains(".c"))
//            {
//                list.add(str);
//            }
//            else if(str.contains(".html"))
//            {
//                
//            }
//        }
//        return list;
//    }


//    public WebCrawler(URL site) throws IOException
//    {
//        String str;
//        BufferedReader webPage = new BufferedReader(new InputStreamReader(site.openStream()));
//        str = webPage.readLine();
//        while(str != null)
//        {
//            str = webPage.readLine();
//        }
//        webPage.close();        
//    }


    /*
     * public LinkedList<String> processHtml(URL site) { int idx, idx2; String line;
     * LinkedList<String> href; LinkedList<String> list = new LinkedList<String>();
     * 
     * try { href = parse(site); for (String str : href) { idx =
     * str.indexOf("<a href"); idx2 = str.lastIndexOf("a>"); line =
     * str.substring(idx, idx2 + 2); list.add(line); } } catch (IOException e) {
     * e.printStackTrace(); } URLUtils.printStack(list); return list; }
     */
     
        /**
     * This method populates the required Lists by processing all the links in the starting url to be crawled
     * @param site to be crawled
     * @throws IOException
     */
//    public void addLink(URL site) throws IOException
//    {
//        LinkedList<String> href;
//        String l, link, label;
//        HTMLLink hlink;
//        //href = parse(site);
//        href = parseAllHtml(site);
//
//        for (String s : href)
//        {
//            l = getLink(s);
//            label = getLabel(s);
//            hlink = new HTMLLink(label, l);
//            link = hlink.getFullLink(l);
//            hlink = new HTMLLink(label, link);
//
//            if (!link.startsWith("http://public."))
//                ;
//            else if (isSource(link))
//                exampleFileList.put(link, hlink);
//            else if (htmlFileList.containsValue(hlink))
//                ;
//            else if (toProcess.containsValue(hlink))
//                ;
//            else
//                toProcess.put(link, hlink);
//        }
//
//        URLUtils.printMap(exampleFileList);
//        // URLUtils.printMap(htmlFileList);
//        //URLUtils.printMap(toProcess);
//    }


